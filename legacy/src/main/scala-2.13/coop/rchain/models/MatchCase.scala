// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package coop.rchain.models

@SerialVersionUID(0L)
final case class MatchCase(
    pattern: coop.rchain.models.Par = coop.rchain.models.Par.defaultInstance,
    source: coop.rchain.models.Par = coop.rchain.models.Par.defaultInstance,
    freeCount: _root_.scala.Int = 0
    ) extends coop.rchain.models.StacksafeMessage[MatchCase] with scalapb.lenses.Updatable[MatchCase] {

    def mergeFromM[F[_]: cats.effect.Sync](`_input__`: _root_.com.google.protobuf.CodedInputStream): F[coop.rchain.models.MatchCase] = {
      
      import cats.effect.Sync
      import cats.syntax.all.*
      
      Sync[F].defer {
        var __pattern = this.pattern
        var __source = this.source
        var __freeCount = this.freeCount
        var _done__ = false
        
        Sync[F].whileM_ (Sync[F].delay { !_done__ }) {
          for {
            _tag__ <- Sync[F].delay { _input__.readTag() }
            _ <- _tag__ match {
              case 0 => Sync[F].delay { _done__ = true }
              case 10 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, __pattern)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __pattern = customTypeValue }
                } yield ()
              case 18 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, __source)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __source = customTypeValue }
                } yield ()
              case 24 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readInt32() }
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __freeCount = customTypeValue }
                } yield ()
            case tag => Sync[F].delay { _input__.skipField(tag) }
            }
          } yield ()
        }
        .map { _ => coop.rchain.models.MatchCase(
          pattern = __pattern,
          source = __source,
          freeCount = __freeCount
        )}
      }
    }
    
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = pattern
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = source
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = freeCount
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    
    @transient var _serializedSizeM: coop.rchain.models.Memo[Int] = null
    
    def serializedSizeM: coop.rchain.models.Memo[Int] = synchronized {
      if(_serializedSizeM == null) {
        _serializedSizeM = new coop.rchain.models.Memo(coop.rchain.models.ProtoM.serializedSize(this))
        _serializedSizeM
      } else _serializedSizeM
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = pattern
        if (__v.serializedSize != 0) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = source
        if (__v.serializedSize != 0) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = freeCount
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
    }
    def withPattern(__v: coop.rchain.models.Par): MatchCase = copy(pattern = __v)
    def withSource(__v: coop.rchain.models.Par): MatchCase = copy(source = __v)
    def withFreeCount(__v: _root_.scala.Int): MatchCase = copy(freeCount = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = pattern
          if (__t != coop.rchain.models.Par.defaultInstance) __t else null
        }
        case 2 => {
          val __t = source
          if (__t != coop.rchain.models.Par.defaultInstance) __t else null
        }
        case 3 => {
          val __t = freeCount
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => pattern.toPMessage
        case 2 => source.toPMessage
        case 3 => _root_.scalapb.descriptors.PInt(freeCount)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: coop.rchain.models.MatchCase.type = coop.rchain.models.MatchCase
    // @@protoc_insertion_point(GeneratedMessage[MatchCase])
}

object MatchCase extends scalapb.GeneratedMessageCompanion[coop.rchain.models.MatchCase] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[coop.rchain.models.MatchCase] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): coop.rchain.models.MatchCase = {
    var __pattern: _root_.scala.Option[coop.rchain.models.Par] = _root_.scala.None
    var __source: _root_.scala.Option[coop.rchain.models.Par] = _root_.scala.None
    var __freeCount: _root_.scala.Int = 0
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __pattern = _root_.scala.Some(__pattern.fold(_root_.scalapb.LiteParser.readMessage[coop.rchain.models.Par](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __source = _root_.scala.Some(__source.fold(_root_.scalapb.LiteParser.readMessage[coop.rchain.models.Par](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __freeCount = _input__.readInt32()
        case tag => _input__.skipField(tag)
      }
    }
    coop.rchain.models.MatchCase(
        pattern = __pattern.getOrElse(coop.rchain.models.Par.defaultInstance),
        source = __source.getOrElse(coop.rchain.models.Par.defaultInstance),
        freeCount = __freeCount
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[coop.rchain.models.MatchCase] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      coop.rchain.models.MatchCase(
        pattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[coop.rchain.models.Par]).getOrElse(coop.rchain.models.Par.defaultInstance),
        source = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[coop.rchain.models.Par]).getOrElse(coop.rchain.models.Par.defaultInstance),
        freeCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RhoTypesProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RhoTypesProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = coop.rchain.models.Par
      case 2 => __out = coop.rchain.models.Par
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = coop.rchain.models.MatchCase(
    pattern = coop.rchain.models.Par.defaultInstance,
    source = coop.rchain.models.Par.defaultInstance,
    freeCount = 0
  )
  implicit class MatchCaseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.MatchCase]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, coop.rchain.models.MatchCase](_l) {
    def pattern: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Par] = field(_.pattern)((c_, f_) => c_.copy(pattern = f_))
    def source: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Par] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def freeCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.freeCount)((c_, f_) => c_.copy(freeCount = f_))
  }
  final val PATTERN_FIELD_NUMBER = 1
  final val SOURCE_FIELD_NUMBER = 2
  final val FREECOUNT_FIELD_NUMBER = 3
  def of(
    pattern: coop.rchain.models.Par,
    source: coop.rchain.models.Par,
    freeCount: _root_.scala.Int
  ): _root_.coop.rchain.models.MatchCase = _root_.coop.rchain.models.MatchCase(
    pattern,
    source,
    freeCount
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[MatchCase])
}
