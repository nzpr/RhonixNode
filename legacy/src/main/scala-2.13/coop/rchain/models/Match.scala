// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package coop.rchain.models
import coop.rchain.models.BitSetBytesMapper.bitSetBytesMapper

@SerialVersionUID(0L)
final case class Match(
    target: coop.rchain.models.Par = coop.rchain.models.Par.defaultInstance,
    cases: _root_.scala.Seq[coop.rchain.models.MatchCase] = _root_.scala.Seq.empty,
    locallyFree: coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet] = coop.rchain.models.Match._typemapper_locallyFree.toCustom(_root_.com.google.protobuf.ByteString.EMPTY),
    connectiveUsed: _root_.scala.Boolean = false
    ) extends coop.rchain.models.StacksafeMessage[Match] with scalapb.lenses.Updatable[Match] {

    def mergeFromM[F[_]: cats.effect.Sync](`_input__`: _root_.com.google.protobuf.CodedInputStream): F[coop.rchain.models.Match] = {
      
      import cats.effect.Sync
      import cats.syntax.all.*
      
      Sync[F].defer {
        var __target = this.target
        val __cases = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.MatchCase] ++= this.cases)
        var __locallyFree = this.locallyFree
        var __connectiveUsed = this.connectiveUsed
        var _done__ = false
        
        Sync[F].whileM_ (Sync[F].delay { !_done__ }) {
          for {
            _tag__ <- Sync[F].delay { _input__.readTag() }
            _ <- _tag__ match {
              case 0 => Sync[F].delay { _done__ = true }
              case 10 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, __target)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __target = customTypeValue }
                } yield ()
              case 18 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.MatchCase.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __cases += customTypeValue }
                } yield ()
              case 34 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readBytes() }
                  customTypeValue =  coop.rchain.models.Match._typemapper_locallyFree.toCustom(readValue)
                  _               <- Sync[F].delay { __locallyFree = customTypeValue }
                } yield ()
              case 40 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readBool() }
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __connectiveUsed = customTypeValue }
                } yield ()
            case tag => Sync[F].delay { _input__.skipField(tag) }
            }
          } yield ()
        }
        .map { _ => coop.rchain.models.Match(
          target = __target,
          cases = __cases.result(),
          locallyFree = __locallyFree,
          connectiveUsed = __connectiveUsed
        )}
      }
    }
    
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = target
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      cases.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = coop.rchain.models.Match._typemapper_locallyFree.toBase(locallyFree)
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
        }
      };
      
      {
        val __value = connectiveUsed
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    
    @transient var _serializedSizeM: coop.rchain.models.Memo[Int] = null
    
    def serializedSizeM: coop.rchain.models.Memo[Int] = synchronized {
      if(_serializedSizeM == null) {
        _serializedSizeM = new coop.rchain.models.Memo(coop.rchain.models.ProtoM.serializedSize(this))
        _serializedSizeM
      } else _serializedSizeM
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = target
        if (__v.serializedSize != 0) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      cases.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = coop.rchain.models.Match._typemapper_locallyFree.toBase(locallyFree)
        if (!__v.isEmpty) {
          _output__.writeBytes(4, __v)
        }
      };
      {
        val __v = connectiveUsed
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
    }
    def withTarget(__v: coop.rchain.models.Par): Match = copy(target = __v)
    def clearCases = copy(cases = _root_.scala.Seq.empty)
    def addCases(__vs: coop.rchain.models.MatchCase *): Match = addAllCases(__vs)
    def addAllCases(__vs: Iterable[coop.rchain.models.MatchCase]): Match = copy(cases = cases ++ __vs)
    def withCases(__v: _root_.scala.Seq[coop.rchain.models.MatchCase]): Match = copy(cases = __v)
    def withLocallyFree(__v: coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]): Match = copy(locallyFree = __v)
    def withConnectiveUsed(__v: _root_.scala.Boolean): Match = copy(connectiveUsed = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = target
          if (__t != coop.rchain.models.Par.defaultInstance) __t else null
        }
        case 2 => cases
        case 4 => {
          val __t = coop.rchain.models.Match._typemapper_locallyFree.toBase(locallyFree)
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => {
          val __t = connectiveUsed
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => target.toPMessage
        case 2 => _root_.scalapb.descriptors.PRepeated(cases.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PByteString(coop.rchain.models.Match._typemapper_locallyFree.toBase(locallyFree))
        case 5 => _root_.scalapb.descriptors.PBoolean(connectiveUsed)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: coop.rchain.models.Match.type = coop.rchain.models.Match
    // @@protoc_insertion_point(GeneratedMessage[Match])
}

object Match extends scalapb.GeneratedMessageCompanion[coop.rchain.models.Match] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[coop.rchain.models.Match] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): coop.rchain.models.Match = {
    var __target: _root_.scala.Option[coop.rchain.models.Par] = _root_.scala.None
    val __cases: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.MatchCase] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.MatchCase]
    var __locallyFree: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __connectiveUsed: _root_.scala.Boolean = false
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __target = _root_.scala.Some(__target.fold(_root_.scalapb.LiteParser.readMessage[coop.rchain.models.Par](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __cases += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.MatchCase](_input__)
        case 34 =>
          __locallyFree = _input__.readBytes()
        case 40 =>
          __connectiveUsed = _input__.readBool()
        case tag => _input__.skipField(tag)
      }
    }
    coop.rchain.models.Match(
        target = __target.getOrElse(coop.rchain.models.Par.defaultInstance),
        cases = __cases.result(),
        locallyFree = coop.rchain.models.Match._typemapper_locallyFree.toCustom(__locallyFree),
        connectiveUsed = __connectiveUsed
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[coop.rchain.models.Match] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      coop.rchain.models.Match(
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[coop.rchain.models.Par]).getOrElse(coop.rchain.models.Par.defaultInstance),
        cases = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[coop.rchain.models.MatchCase]]).getOrElse(_root_.scala.Seq.empty),
        locallyFree = coop.rchain.models.Match._typemapper_locallyFree.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)),
        connectiveUsed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RhoTypesProto.javaDescriptor.getMessageTypes().get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RhoTypesProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = coop.rchain.models.Par
      case 2 => __out = coop.rchain.models.MatchCase
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = coop.rchain.models.Match(
    target = coop.rchain.models.Par.defaultInstance,
    cases = _root_.scala.Seq.empty,
    locallyFree = coop.rchain.models.Match._typemapper_locallyFree.toCustom(_root_.com.google.protobuf.ByteString.EMPTY),
    connectiveUsed = false
  )
  implicit class MatchLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Match]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, coop.rchain.models.Match](_l) {
    def target: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Par] = field(_.target)((c_, f_) => c_.copy(target = f_))
    def cases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.MatchCase]] = field(_.cases)((c_, f_) => c_.copy(cases = f_))
    def locallyFree: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]] = field(_.locallyFree)((c_, f_) => c_.copy(locallyFree = f_))
    def connectiveUsed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.connectiveUsed)((c_, f_) => c_.copy(connectiveUsed = f_))
  }
  final val TARGET_FIELD_NUMBER = 1
  final val CASES_FIELD_NUMBER = 2
  final val LOCALLYFREE_FIELD_NUMBER = 4
  final val CONNECTIVE_USED_FIELD_NUMBER = 5
  @transient
  private[models] val _typemapper_locallyFree: _root_.scalapb.TypeMapper[_root_.com.google.protobuf.ByteString, coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]] = implicitly[_root_.scalapb.TypeMapper[_root_.com.google.protobuf.ByteString, coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]]]
  def of(
    target: coop.rchain.models.Par,
    cases: _root_.scala.Seq[coop.rchain.models.MatchCase],
    locallyFree: coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet],
    connectiveUsed: _root_.scala.Boolean
  ): _root_.coop.rchain.models.Match = _root_.coop.rchain.models.Match(
    target,
    cases,
    locallyFree,
    connectiveUsed
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[Match])
}
