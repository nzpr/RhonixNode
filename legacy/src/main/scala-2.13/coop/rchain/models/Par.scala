// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package coop.rchain.models
import coop.rchain.models.BitSetBytesMapper.bitSetBytesMapper

/** *
  * Rholang process
  *
  * For example, `&#64;0!(1) | &#64;2!(3) | for(x &lt;- &#64;0) { Nil }` has two sends
  * and one receive.
  *
  * The Nil process is a `Par` with no sends, receives, etc.
  *
  * @param unforgeables
  *   unforgeable names
  */
@SerialVersionUID(0L)
final case class Par(
    sends: _root_.scala.Seq[coop.rchain.models.Send] = _root_.scala.Seq.empty,
    receives: _root_.scala.Seq[coop.rchain.models.Receive] = _root_.scala.Seq.empty,
    news: _root_.scala.Seq[coop.rchain.models.New] = _root_.scala.Seq.empty,
    exprs: _root_.scala.Seq[coop.rchain.models.Expr] = _root_.scala.Seq.empty,
    matches: _root_.scala.Seq[coop.rchain.models.Match] = _root_.scala.Seq.empty,
    unforgeables: _root_.scala.Seq[coop.rchain.models.GUnforgeable] = _root_.scala.Seq.empty,
    bundles: _root_.scala.Seq[coop.rchain.models.Bundle] = _root_.scala.Seq.empty,
    connectives: _root_.scala.Seq[coop.rchain.models.Connective] = _root_.scala.Seq.empty,
    locallyFree: coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet] = coop.rchain.models.Par._typemapper_locallyFree.toCustom(_root_.com.google.protobuf.ByteString.EMPTY),
    connectiveUsed: _root_.scala.Boolean = false
    ) extends coop.rchain.models.StacksafeMessage[Par] with scalapb.lenses.Updatable[Par] {

    def mergeFromM[F[_]: cats.effect.Sync](`_input__`: _root_.com.google.protobuf.CodedInputStream): F[coop.rchain.models.Par] = {
      
      import cats.effect.Sync
      import cats.syntax.all.*
      
      Sync[F].defer {
        val __sends = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Send] ++= this.sends)
        val __receives = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Receive] ++= this.receives)
        val __news = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.New] ++= this.news)
        val __exprs = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Expr] ++= this.exprs)
        val __matches = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Match] ++= this.matches)
        val __unforgeables = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.GUnforgeable] ++= this.unforgeables)
        val __bundles = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Bundle] ++= this.bundles)
        val __connectives = (new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Connective] ++= this.connectives)
        var __locallyFree = this.locallyFree
        var __connectiveUsed = this.connectiveUsed
        var _done__ = false
        
        Sync[F].whileM_ (Sync[F].delay { !_done__ }) {
          for {
            _tag__ <- Sync[F].delay { _input__.readTag() }
            _ <- _tag__ match {
              case 0 => Sync[F].delay { _done__ = true }
              case 10 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.Send.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __sends += customTypeValue }
                } yield ()
              case 18 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.Receive.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __receives += customTypeValue }
                } yield ()
              case 34 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.New.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __news += customTypeValue }
                } yield ()
              case 42 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.Expr.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __exprs += customTypeValue }
                } yield ()
              case 50 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.Match.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __matches += customTypeValue }
                } yield ()
              case 58 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.GUnforgeable.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __unforgeables += customTypeValue }
                } yield ()
              case 90 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.Bundle.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __bundles += customTypeValue }
                } yield ()
              case 66 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, coop.rchain.models.Connective.defaultInstance)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __connectives += customTypeValue }
                } yield ()
              case 74 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readBytes() }
                  customTypeValue =  coop.rchain.models.Par._typemapper_locallyFree.toCustom(readValue)
                  _               <- Sync[F].delay { __locallyFree = customTypeValue }
                } yield ()
              case 80 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readBool() }
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __connectiveUsed = customTypeValue }
                } yield ()
            case tag => Sync[F].delay { _input__.skipField(tag) }
            }
          } yield ()
        }
        .map { _ => coop.rchain.models.Par(
          sends = __sends.result(),
          receives = __receives.result(),
          news = __news.result(),
          exprs = __exprs.result(),
          matches = __matches.result(),
          unforgeables = __unforgeables.result(),
          bundles = __bundles.result(),
          connectives = __connectives.result(),
          locallyFree = __locallyFree,
          connectiveUsed = __connectiveUsed
        )}
      }
    }
    
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      sends.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      receives.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      news.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      exprs.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      matches.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      unforgeables.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      bundles.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      connectives.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = coop.rchain.models.Par._typemapper_locallyFree.toBase(locallyFree)
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(9, __value)
        }
      };
      
      {
        val __value = connectiveUsed
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    
    @transient var _serializedSizeM: coop.rchain.models.Memo[Int] = null
    
    def serializedSizeM: coop.rchain.models.Memo[Int] = synchronized {
      if(_serializedSizeM == null) {
        _serializedSizeM = new coop.rchain.models.Memo(coop.rchain.models.ProtoM.serializedSize(this))
        _serializedSizeM
      } else _serializedSizeM
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sends.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      receives.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      news.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      exprs.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      matches.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unforgeables.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      connectives.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = coop.rchain.models.Par._typemapper_locallyFree.toBase(locallyFree)
        if (!__v.isEmpty) {
          _output__.writeBytes(9, __v)
        }
      };
      {
        val __v = connectiveUsed
        if (__v != false) {
          _output__.writeBool(10, __v)
        }
      };
      bundles.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def clearSends = copy(sends = _root_.scala.Seq.empty)
    def addSends(__vs: coop.rchain.models.Send *): Par = addAllSends(__vs)
    def addAllSends(__vs: Iterable[coop.rchain.models.Send]): Par = copy(sends = sends ++ __vs)
    def withSends(__v: _root_.scala.Seq[coop.rchain.models.Send]): Par = copy(sends = __v)
    def clearReceives = copy(receives = _root_.scala.Seq.empty)
    def addReceives(__vs: coop.rchain.models.Receive *): Par = addAllReceives(__vs)
    def addAllReceives(__vs: Iterable[coop.rchain.models.Receive]): Par = copy(receives = receives ++ __vs)
    def withReceives(__v: _root_.scala.Seq[coop.rchain.models.Receive]): Par = copy(receives = __v)
    def clearNews = copy(news = _root_.scala.Seq.empty)
    def addNews(__vs: coop.rchain.models.New *): Par = addAllNews(__vs)
    def addAllNews(__vs: Iterable[coop.rchain.models.New]): Par = copy(news = news ++ __vs)
    def withNews(__v: _root_.scala.Seq[coop.rchain.models.New]): Par = copy(news = __v)
    def clearExprs = copy(exprs = _root_.scala.Seq.empty)
    def addExprs(__vs: coop.rchain.models.Expr *): Par = addAllExprs(__vs)
    def addAllExprs(__vs: Iterable[coop.rchain.models.Expr]): Par = copy(exprs = exprs ++ __vs)
    def withExprs(__v: _root_.scala.Seq[coop.rchain.models.Expr]): Par = copy(exprs = __v)
    def clearMatches = copy(matches = _root_.scala.Seq.empty)
    def addMatches(__vs: coop.rchain.models.Match *): Par = addAllMatches(__vs)
    def addAllMatches(__vs: Iterable[coop.rchain.models.Match]): Par = copy(matches = matches ++ __vs)
    def withMatches(__v: _root_.scala.Seq[coop.rchain.models.Match]): Par = copy(matches = __v)
    def clearUnforgeables = copy(unforgeables = _root_.scala.Seq.empty)
    def addUnforgeables(__vs: coop.rchain.models.GUnforgeable *): Par = addAllUnforgeables(__vs)
    def addAllUnforgeables(__vs: Iterable[coop.rchain.models.GUnforgeable]): Par = copy(unforgeables = unforgeables ++ __vs)
    def withUnforgeables(__v: _root_.scala.Seq[coop.rchain.models.GUnforgeable]): Par = copy(unforgeables = __v)
    def clearBundles = copy(bundles = _root_.scala.Seq.empty)
    def addBundles(__vs: coop.rchain.models.Bundle *): Par = addAllBundles(__vs)
    def addAllBundles(__vs: Iterable[coop.rchain.models.Bundle]): Par = copy(bundles = bundles ++ __vs)
    def withBundles(__v: _root_.scala.Seq[coop.rchain.models.Bundle]): Par = copy(bundles = __v)
    def clearConnectives = copy(connectives = _root_.scala.Seq.empty)
    def addConnectives(__vs: coop.rchain.models.Connective *): Par = addAllConnectives(__vs)
    def addAllConnectives(__vs: Iterable[coop.rchain.models.Connective]): Par = copy(connectives = connectives ++ __vs)
    def withConnectives(__v: _root_.scala.Seq[coop.rchain.models.Connective]): Par = copy(connectives = __v)
    def withLocallyFree(__v: coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]): Par = copy(locallyFree = __v)
    def withConnectiveUsed(__v: _root_.scala.Boolean): Par = copy(connectiveUsed = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sends
        case 2 => receives
        case 4 => news
        case 5 => exprs
        case 6 => matches
        case 7 => unforgeables
        case 11 => bundles
        case 8 => connectives
        case 9 => {
          val __t = coop.rchain.models.Par._typemapper_locallyFree.toBase(locallyFree)
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 10 => {
          val __t = connectiveUsed
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(sends.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(receives.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(news.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(exprs.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(matches.iterator.map(_.toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(unforgeables.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(bundles.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(connectives.iterator.map(_.toPMessage).toVector)
        case 9 => _root_.scalapb.descriptors.PByteString(coop.rchain.models.Par._typemapper_locallyFree.toBase(locallyFree))
        case 10 => _root_.scalapb.descriptors.PBoolean(connectiveUsed)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: coop.rchain.models.Par.type = coop.rchain.models.Par
    // @@protoc_insertion_point(GeneratedMessage[Par])
}

object Par extends scalapb.GeneratedMessageCompanion[coop.rchain.models.Par] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[coop.rchain.models.Par] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): coop.rchain.models.Par = {
    val __sends: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Send] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Send]
    val __receives: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Receive] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Receive]
    val __news: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.New] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.New]
    val __exprs: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Expr] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Expr]
    val __matches: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Match] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Match]
    val __unforgeables: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.GUnforgeable] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.GUnforgeable]
    val __bundles: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Bundle] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Bundle]
    val __connectives: _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Connective] = new _root_.scala.collection.immutable.VectorBuilder[coop.rchain.models.Connective]
    var __locallyFree: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __connectiveUsed: _root_.scala.Boolean = false
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sends += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Send](_input__)
        case 18 =>
          __receives += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Receive](_input__)
        case 34 =>
          __news += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.New](_input__)
        case 42 =>
          __exprs += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Expr](_input__)
        case 50 =>
          __matches += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Match](_input__)
        case 58 =>
          __unforgeables += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.GUnforgeable](_input__)
        case 90 =>
          __bundles += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Bundle](_input__)
        case 66 =>
          __connectives += _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Connective](_input__)
        case 74 =>
          __locallyFree = _input__.readBytes()
        case 80 =>
          __connectiveUsed = _input__.readBool()
        case tag => _input__.skipField(tag)
      }
    }
    coop.rchain.models.Par(
        sends = __sends.result(),
        receives = __receives.result(),
        news = __news.result(),
        exprs = __exprs.result(),
        matches = __matches.result(),
        unforgeables = __unforgeables.result(),
        bundles = __bundles.result(),
        connectives = __connectives.result(),
        locallyFree = coop.rchain.models.Par._typemapper_locallyFree.toCustom(__locallyFree),
        connectiveUsed = __connectiveUsed
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[coop.rchain.models.Par] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      coop.rchain.models.Par(
        sends = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[coop.rchain.models.Send]]).getOrElse(_root_.scala.Seq.empty),
        receives = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[coop.rchain.models.Receive]]).getOrElse(_root_.scala.Seq.empty),
        news = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[coop.rchain.models.New]]).getOrElse(_root_.scala.Seq.empty),
        exprs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[coop.rchain.models.Expr]]).getOrElse(_root_.scala.Seq.empty),
        matches = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[coop.rchain.models.Match]]).getOrElse(_root_.scala.Seq.empty),
        unforgeables = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[coop.rchain.models.GUnforgeable]]).getOrElse(_root_.scala.Seq.empty),
        bundles = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[coop.rchain.models.Bundle]]).getOrElse(_root_.scala.Seq.empty),
        connectives = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[coop.rchain.models.Connective]]).getOrElse(_root_.scala.Seq.empty),
        locallyFree = coop.rchain.models.Par._typemapper_locallyFree.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)),
        connectiveUsed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RhoTypesProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RhoTypesProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = coop.rchain.models.Send
      case 2 => __out = coop.rchain.models.Receive
      case 4 => __out = coop.rchain.models.New
      case 5 => __out = coop.rchain.models.Expr
      case 6 => __out = coop.rchain.models.Match
      case 7 => __out = coop.rchain.models.GUnforgeable
      case 11 => __out = coop.rchain.models.Bundle
      case 8 => __out = coop.rchain.models.Connective
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = coop.rchain.models.Par(
    sends = _root_.scala.Seq.empty,
    receives = _root_.scala.Seq.empty,
    news = _root_.scala.Seq.empty,
    exprs = _root_.scala.Seq.empty,
    matches = _root_.scala.Seq.empty,
    unforgeables = _root_.scala.Seq.empty,
    bundles = _root_.scala.Seq.empty,
    connectives = _root_.scala.Seq.empty,
    locallyFree = coop.rchain.models.Par._typemapper_locallyFree.toCustom(_root_.com.google.protobuf.ByteString.EMPTY),
    connectiveUsed = false
  )
  implicit class ParLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Par]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, coop.rchain.models.Par](_l) {
    def sends: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.Send]] = field(_.sends)((c_, f_) => c_.copy(sends = f_))
    def receives: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.Receive]] = field(_.receives)((c_, f_) => c_.copy(receives = f_))
    def news: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.New]] = field(_.news)((c_, f_) => c_.copy(news = f_))
    def exprs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.Expr]] = field(_.exprs)((c_, f_) => c_.copy(exprs = f_))
    def matches: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.Match]] = field(_.matches)((c_, f_) => c_.copy(matches = f_))
    def unforgeables: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.GUnforgeable]] = field(_.unforgeables)((c_, f_) => c_.copy(unforgeables = f_))
    def bundles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.Bundle]] = field(_.bundles)((c_, f_) => c_.copy(bundles = f_))
    def connectives: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[coop.rchain.models.Connective]] = field(_.connectives)((c_, f_) => c_.copy(connectives = f_))
    def locallyFree: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]] = field(_.locallyFree)((c_, f_) => c_.copy(locallyFree = f_))
    def connectiveUsed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.connectiveUsed)((c_, f_) => c_.copy(connectiveUsed = f_))
  }
  final val SENDS_FIELD_NUMBER = 1
  final val RECEIVES_FIELD_NUMBER = 2
  final val NEWS_FIELD_NUMBER = 4
  final val EXPRS_FIELD_NUMBER = 5
  final val MATCHES_FIELD_NUMBER = 6
  final val UNFORGEABLES_FIELD_NUMBER = 7
  final val BUNDLES_FIELD_NUMBER = 11
  final val CONNECTIVES_FIELD_NUMBER = 8
  final val LOCALLYFREE_FIELD_NUMBER = 9
  final val CONNECTIVE_USED_FIELD_NUMBER = 10
  @transient
  private[models] val _typemapper_locallyFree: _root_.scalapb.TypeMapper[_root_.com.google.protobuf.ByteString, coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]] = implicitly[_root_.scalapb.TypeMapper[_root_.com.google.protobuf.ByteString, coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]]]
  def of(
    sends: _root_.scala.Seq[coop.rchain.models.Send],
    receives: _root_.scala.Seq[coop.rchain.models.Receive],
    news: _root_.scala.Seq[coop.rchain.models.New],
    exprs: _root_.scala.Seq[coop.rchain.models.Expr],
    matches: _root_.scala.Seq[coop.rchain.models.Match],
    unforgeables: _root_.scala.Seq[coop.rchain.models.GUnforgeable],
    bundles: _root_.scala.Seq[coop.rchain.models.Bundle],
    connectives: _root_.scala.Seq[coop.rchain.models.Connective],
    locallyFree: coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet],
    connectiveUsed: _root_.scala.Boolean
  ): _root_.coop.rchain.models.Par = _root_.coop.rchain.models.Par(
    sends,
    receives,
    news,
    exprs,
    matches,
    unforgeables,
    bundles,
    connectives,
    locallyFree,
    connectiveUsed
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[Par])
}
