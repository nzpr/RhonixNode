// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package coop.rchain.models

/** *
  * Nothing can be received from a (quoted) bundle with `readFlag = false`.
  * Likeise nothing can be sent to a (quoted) bundle with `writeFlag = false`.
  *
  * If both flags are set to false, bundle allows only for equivalance check.
  *
  * @param writeFlag
  *   flag indicating whether bundle is writeable
  * @param readFlag
  *   flag indicating whether bundle is readable
  */
@SerialVersionUID(0L)
final case class Bundle(
    body: coop.rchain.models.Par = coop.rchain.models.Par.defaultInstance,
    writeFlag: _root_.scala.Boolean = false,
    readFlag: _root_.scala.Boolean = false
    ) extends coop.rchain.models.StacksafeMessage[Bundle] with scalapb.lenses.Updatable[Bundle] {

    def mergeFromM[F[_]: cats.effect.Sync](`_input__`: _root_.com.google.protobuf.CodedInputStream): F[coop.rchain.models.Bundle] = {
      
      import cats.effect.Sync
      import cats.syntax.all.*
      
      Sync[F].defer {
        var __body = this.body
        var __writeFlag = this.writeFlag
        var __readFlag = this.readFlag
        var _done__ = false
        
        Sync[F].whileM_ (Sync[F].delay { !_done__ }) {
          for {
            _tag__ <- Sync[F].delay { _input__.readTag() }
            _ <- _tag__ match {
              case 0 => Sync[F].delay { _done__ = true }
              case 10 =>
                for {
                  readValue       <- coop.rchain.models.SafeParser.readMessage(_input__, __body)
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __body = customTypeValue }
                } yield ()
              case 16 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readBool() }
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __writeFlag = customTypeValue }
                } yield ()
              case 24 =>
                for {
                  readValue       <- Sync[F].delay { _input__.readBool() }
                  customTypeValue =  readValue
                  _               <- Sync[F].delay { __readFlag = customTypeValue }
                } yield ()
            case tag => Sync[F].delay { _input__.skipField(tag) }
            }
          } yield ()
        }
        .map { _ => coop.rchain.models.Bundle(
          body = __body,
          writeFlag = __writeFlag,
          readFlag = __readFlag
        )}
      }
    }
    
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = body
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = writeFlag
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = readFlag
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    
    @transient var _serializedSizeM: coop.rchain.models.Memo[Int] = null
    
    def serializedSizeM: coop.rchain.models.Memo[Int] = synchronized {
      if(_serializedSizeM == null) {
        _serializedSizeM = new coop.rchain.models.Memo(coop.rchain.models.ProtoM.serializedSize(this))
        _serializedSizeM
      } else _serializedSizeM
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = body
        if (__v.serializedSize != 0) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = writeFlag
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = readFlag
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
    }
    def withBody(__v: coop.rchain.models.Par): Bundle = copy(body = __v)
    def withWriteFlag(__v: _root_.scala.Boolean): Bundle = copy(writeFlag = __v)
    def withReadFlag(__v: _root_.scala.Boolean): Bundle = copy(readFlag = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = body
          if (__t != coop.rchain.models.Par.defaultInstance) __t else null
        }
        case 2 => {
          val __t = writeFlag
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = readFlag
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => body.toPMessage
        case 2 => _root_.scalapb.descriptors.PBoolean(writeFlag)
        case 3 => _root_.scalapb.descriptors.PBoolean(readFlag)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: coop.rchain.models.Bundle.type = coop.rchain.models.Bundle
    // @@protoc_insertion_point(GeneratedMessage[Bundle])
}

object Bundle extends scalapb.GeneratedMessageCompanion[coop.rchain.models.Bundle] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[coop.rchain.models.Bundle] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): coop.rchain.models.Bundle = {
    var __body: _root_.scala.Option[coop.rchain.models.Par] = _root_.scala.None
    var __writeFlag: _root_.scala.Boolean = false
    var __readFlag: _root_.scala.Boolean = false
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __body = _root_.scala.Some(__body.fold(_root_.scalapb.LiteParser.readMessage[coop.rchain.models.Par](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __writeFlag = _input__.readBool()
        case 24 =>
          __readFlag = _input__.readBool()
        case tag => _input__.skipField(tag)
      }
    }
    coop.rchain.models.Bundle(
        body = __body.getOrElse(coop.rchain.models.Par.defaultInstance),
        writeFlag = __writeFlag,
        readFlag = __readFlag
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[coop.rchain.models.Bundle] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      coop.rchain.models.Bundle(
        body = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[coop.rchain.models.Par]).getOrElse(coop.rchain.models.Par.defaultInstance),
        writeFlag = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        readFlag = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RhoTypesProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RhoTypesProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = coop.rchain.models.Par
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = coop.rchain.models.Bundle(
    body = coop.rchain.models.Par.defaultInstance,
    writeFlag = false,
    readFlag = false
  )
  implicit class BundleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Bundle]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, coop.rchain.models.Bundle](_l) {
    def body: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Par] = field(_.body)((c_, f_) => c_.copy(body = f_))
    def writeFlag: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.writeFlag)((c_, f_) => c_.copy(writeFlag = f_))
    def readFlag: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.readFlag)((c_, f_) => c_.copy(readFlag = f_))
  }
  final val BODY_FIELD_NUMBER = 1
  final val WRITEFLAG_FIELD_NUMBER = 2
  final val READFLAG_FIELD_NUMBER = 3
  def of(
    body: coop.rchain.models.Par,
    writeFlag: _root_.scala.Boolean,
    readFlag: _root_.scala.Boolean
  ): _root_.coop.rchain.models.Bundle = _root_.coop.rchain.models.Bundle(
    body,
    writeFlag,
    readFlag
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[Bundle])
}
