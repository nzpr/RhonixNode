// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package coop.rchain.models

/** While we use vars in both positions, when producing the normalized
  * representation we need a discipline to track whether a var is a name or a
  * process.
  * These are DeBruijn levels
  */
@SerialVersionUID(0L)
final case class Var(
  varInstance: coop.rchain.models.Var.VarInstance = coop.rchain.models.Var.VarInstance.Empty,
) extends coop.rchain.models.StacksafeMessage[Var]
    with scalapb.lenses.Updatable[Var] {

  def mergeFromM[F[_]: cats.effect.Sync](
    `_input__`: _root_.com.google.protobuf.CodedInputStream,
  ): F[coop.rchain.models.Var] = {

    import cats.effect.Sync
    import cats.syntax.all.*

    Sync[F].defer {
      var __varInstance = this.varInstance
      var _done__       = false

      Sync[F]
        .whileM_(Sync[F].delay(!_done__)) {
          for {
            _tag__ <- Sync[F].delay(_input__.readTag())
            _      <- _tag__ match {
                        case 0   => Sync[F].delay { _done__ = true }
                        case 8   =>
                          for {
                            readValue      <- Sync[F].delay(_input__.readSInt32())
                            customTypeValue = readValue
                            _              <-
                              Sync[F].delay { __varInstance = coop.rchain.models.Var.VarInstance.BoundVar(customTypeValue) }
                          } yield ()
                        case 16  =>
                          for {
                            readValue      <- Sync[F].delay(_input__.readSInt32())
                            customTypeValue = readValue
                            _              <-
                              Sync[F].delay { __varInstance = coop.rchain.models.Var.VarInstance.FreeVar(customTypeValue) }
                          } yield ()
                        case 26  =>
                          for {
                            readValue      <- coop.rchain.models.SafeParser.readMessage(
                                                _input__,
                                                varInstance.wildcard.getOrElse(coop.rchain.models.Var.WildcardMsg.defaultInstance),
                                              )
                            customTypeValue = readValue
                            _              <-
                              Sync[F].delay { __varInstance = coop.rchain.models.Var.VarInstance.Wildcard(customTypeValue) }
                          } yield ()
                        case tag => Sync[F].delay(_input__.skipField(tag))
                      }
          } yield ()
        }
        .map { _ =>
          coop.rchain.models.Var(
            varInstance = __varInstance,
          )
        }
    }
  }

  @transient
  private[this] var __serializedSizeMemoized: _root_.scala.Int  = 0
  private[this] def __computeSerializedSize(): _root_.scala.Int = {
    var __size = 0
    if (varInstance.boundVar.isDefined) {
      val __value = varInstance.boundVar.get
      __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(1, __value)
    };
    if (varInstance.freeVar.isDefined) {
      val __value = varInstance.freeVar.get
      __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(2, __value)
    };
    if (varInstance.wildcard.isDefined) {
      val __value = varInstance.wildcard.get
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream
        .computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
    };
    __size
  }
  override def serializedSize: _root_.scala.Int                 = {
    var __size = __serializedSizeMemoized
    if (__size == 0) {
      __size = __computeSerializedSize() + 1
      __serializedSizeMemoized = __size
    }
    __size - 1

  }

  @transient var _serializedSizeM: coop.rchain.models.Memo[Int] = null

  def serializedSizeM: coop.rchain.models.Memo[Int]                                                    = synchronized {
    if (_serializedSizeM == null) {
      _serializedSizeM = new coop.rchain.models.Memo(coop.rchain.models.ProtoM.serializedSize(this))
      _serializedSizeM
    } else _serializedSizeM
  }
  def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit            = {
    varInstance.boundVar.foreach { __v =>
      val __m = __v
      _output__.writeSInt32(1, __m)
    };
    varInstance.freeVar.foreach { __v =>
      val __m = __v
      _output__.writeSInt32(2, __m)
    };
    varInstance.wildcard.foreach { __v =>
      val __m = __v
      _output__.writeTag(3, 2)
      _output__.writeUInt32NoTag(__m.serializedSize)
      __m.writeTo(_output__)
    };
  }
  def getBoundVar: _root_.scala.Int                                                                    = varInstance.boundVar.getOrElse(0)
  def withBoundVar(__v: _root_.scala.Int): Var                                                         = copy(varInstance = coop.rchain.models.Var.VarInstance.BoundVar(__v))
  def getFreeVar: _root_.scala.Int                                                                     = varInstance.freeVar.getOrElse(0)
  def withFreeVar(__v: _root_.scala.Int): Var                                                          = copy(varInstance = coop.rchain.models.Var.VarInstance.FreeVar(__v))
  def getWildcard: coop.rchain.models.Var.WildcardMsg                                                  =
    varInstance.wildcard.getOrElse(coop.rchain.models.Var.WildcardMsg.defaultInstance)
  def withWildcard(__v: coop.rchain.models.Var.WildcardMsg): Var                                       =
    copy(varInstance = coop.rchain.models.Var.VarInstance.Wildcard(__v))
  def clearVarInstance: Var                                                                            = copy(varInstance = coop.rchain.models.Var.VarInstance.Empty)
  def withVarInstance(__v: coop.rchain.models.Var.VarInstance): Var                                    = copy(varInstance = __v)
  def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any                              =
    (__fieldNumber: @ _root_.scala.unchecked) match {
      case 1 => varInstance.boundVar.orNull
      case 2 => varInstance.freeVar.orNull
      case 3 => varInstance.wildcard.orNull
    }
  def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
    _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
    (__field.number: @ _root_.scala.unchecked) match {
      case 1 =>
        varInstance.boundVar.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      case 2 => varInstance.freeVar.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      case 3 => varInstance.wildcard.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
    }
  }
  def toProtoString: _root_.scala.Predef.String                                                        = _root_.scalapb.TextFormat.printToUnicodeString(this)
  def companion: coop.rchain.models.Var.type                                                           = coop.rchain.models.Var
  // @@protoc_insertion_point(GeneratedMessage[Var])
}

object Var extends scalapb.GeneratedMessageCompanion[coop.rchain.models.Var] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[coop.rchain.models.Var]                    = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): coop.rchain.models.Var              = {
    var __varInstance: coop.rchain.models.Var.VarInstance = coop.rchain.models.Var.VarInstance.Empty
    var _done__                                           = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0   => _done__ = true
        case 8   =>
          __varInstance = coop.rchain.models.Var.VarInstance.BoundVar(_input__.readSInt32())
        case 16  =>
          __varInstance = coop.rchain.models.Var.VarInstance.FreeVar(_input__.readSInt32())
        case 26  =>
          __varInstance = coop.rchain.models.Var.VarInstance.Wildcard(
            __varInstance.wildcard.fold(
              _root_.scalapb.LiteParser.readMessage[coop.rchain.models.Var.WildcardMsg](_input__),
            )(_root_.scalapb.LiteParser.readMessage(_input__, _)),
          )
        case tag => _input__.skipField(tag)
      }
    }
    coop.rchain.models.Var(
      varInstance = __varInstance,
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[coop.rchain.models.Var]                         =
    _root_.scalapb.descriptors.Reads {
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(
          __fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor),
          "FieldDescriptor does not match message type.",
        )
        coop.rchain.models.Var(
          varInstance = __fieldsMap
            .get(scalaDescriptor.findFieldByNumber(1).get)
            .flatMap(_.as[_root_.scala.Option[_root_.scala.Int]])
            .map(coop.rchain.models.Var.VarInstance.BoundVar(_))
            .orElse[coop.rchain.models.Var.VarInstance](
              __fieldsMap
                .get(scalaDescriptor.findFieldByNumber(2).get)
                .flatMap(_.as[_root_.scala.Option[_root_.scala.Int]])
                .map(coop.rchain.models.Var.VarInstance.FreeVar(_)),
            )
            .orElse[coop.rchain.models.Var.VarInstance](
              __fieldsMap
                .get(scalaDescriptor.findFieldByNumber(3).get)
                .flatMap(_.as[_root_.scala.Option[coop.rchain.models.Var.WildcardMsg]])
                .map(coop.rchain.models.Var.VarInstance.Wildcard(_)),
            )
            .getOrElse(coop.rchain.models.Var.VarInstance.Empty),
        )
      case _                                                => throw new RuntimeException("Expected PMessage")
    }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor                                       =
    RhoTypesProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor                                                  = RhoTypesProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @ _root_.scala.unchecked) match {
      case 3 => __out = coop.rchain.models.Var.WildcardMsg
    }
    __out
  }
  lazy val nestedMessagesCompanions
    : Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.coop.rchain.models.Var.WildcardMsg,
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_]  =
    throw new MatchError(__fieldNumber)
  lazy val defaultInstance                                                                                    = coop.rchain.models.Var(
    varInstance = coop.rchain.models.Var.VarInstance.Empty,
  )
  sealed trait VarInstance extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean                                     = false
    def isDefined: _root_.scala.Boolean                                   = true
    def isBoundVar: _root_.scala.Boolean                                  = false
    def isFreeVar: _root_.scala.Boolean                                   = false
    def isWildcard: _root_.scala.Boolean                                  = false
    def boundVar: _root_.scala.Option[_root_.scala.Int]                   = _root_.scala.None
    def freeVar: _root_.scala.Option[_root_.scala.Int]                    = _root_.scala.None
    def wildcard: _root_.scala.Option[coop.rchain.models.Var.WildcardMsg] = _root_.scala.None
  }
  object VarInstance {
    @SerialVersionUID(0L)
    case object Empty extends coop.rchain.models.Var.VarInstance {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean   = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int        = 0
      override def value: _root_.scala.Nothing     = throw new java.util.NoSuchElementException("Empty.value")
    }

    @SerialVersionUID(0L)
    final case class BoundVar(value: _root_.scala.Int)                   extends coop.rchain.models.Var.VarInstance {
      type ValueType = _root_.scala.Int
      override def isBoundVar: _root_.scala.Boolean                = true
      override def boundVar: _root_.scala.Option[_root_.scala.Int] = Some(value)
      override def number: _root_.scala.Int                        = 1
    }
    @SerialVersionUID(0L)
    final case class FreeVar(value: _root_.scala.Int)                    extends coop.rchain.models.Var.VarInstance {
      type ValueType = _root_.scala.Int
      override def isFreeVar: _root_.scala.Boolean                = true
      override def freeVar: _root_.scala.Option[_root_.scala.Int] = Some(value)
      override def number: _root_.scala.Int                       = 2
    }
    @SerialVersionUID(0L)
    final case class Wildcard(value: coop.rchain.models.Var.WildcardMsg) extends coop.rchain.models.Var.VarInstance {
      type ValueType = coop.rchain.models.Var.WildcardMsg
      override def isWildcard: _root_.scala.Boolean                                  = true
      override def wildcard: _root_.scala.Option[coop.rchain.models.Var.WildcardMsg] = Some(value)
      override def number: _root_.scala.Int                                          = 3
    }
  }
  @SerialVersionUID(0L)
  final case class WildcardMsg(
  ) extends coop.rchain.models.StacksafeMessage[WildcardMsg]
      with scalapb.lenses.Updatable[WildcardMsg] {

    def mergeFromM[F[_]: cats.effect.Sync](
      `_input__`: _root_.com.google.protobuf.CodedInputStream,
    ): F[coop.rchain.models.Var.WildcardMsg] = {

      import cats.effect.Sync
      import cats.syntax.all.*

      Sync[F].defer {
        var _done__ = false

        Sync[F]
          .whileM_(Sync[F].delay(!_done__)) {
            for {
              _tag__ <- Sync[F].delay(_input__.readTag())
              _      <- _tag__ match {
                          case 0   => Sync[F].delay { _done__ = true }
                          case tag => Sync[F].delay(_input__.skipField(tag))
                        }
            } yield ()
          }
          .map { _ =>
            coop.rchain.models.Var.WildcardMsg(
            )
          }
      }
    }

    final override def serializedSize: _root_.scala.Int = 0

    @transient var _serializedSizeM: coop.rchain.models.Memo[Int] = null

    def serializedSizeM: coop.rchain.models.Memo[Int]                                                    = synchronized {
      if (_serializedSizeM == null) {
        _serializedSizeM = new coop.rchain.models.Memo(coop.rchain.models.ProtoM.serializedSize(this))
        _serializedSizeM
      } else _serializedSizeM
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit            = {}
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any                              = throw new MatchError(__fieldNumber)
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue =
      throw new MatchError(__field)
    def toProtoString: _root_.scala.Predef.String                                                        = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: coop.rchain.models.Var.WildcardMsg.type                                               = coop.rchain.models.Var.WildcardMsg
    // @@protoc_insertion_point(GeneratedMessage[Var.WildcardMsg])
  }

  object WildcardMsg extends scalapb.GeneratedMessageCompanion[coop.rchain.models.Var.WildcardMsg] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[coop.rchain.models.Var.WildcardMsg]        = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): coop.rchain.models.Var.WildcardMsg  = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0   => _done__ = true
          case tag => _input__.skipField(tag)
        }
      }
      coop.rchain.models.Var.WildcardMsg(
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[coop.rchain.models.Var.WildcardMsg]             =
      _root_.scalapb.descriptors.Reads {
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(
            __fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor),
            "FieldDescriptor does not match message type.",
          )
          coop.rchain.models.Var.WildcardMsg(
          )
        case _                                                => throw new RuntimeException("Expected PMessage")
      }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor                                       =
      coop.rchain.models.Var.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor                                                  =
      coop.rchain.models.Var.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] =
      throw new MatchError(__number)
    lazy val nestedMessagesCompanions
      : Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_]  =
      throw new MatchError(__fieldNumber)
    lazy val defaultInstance                                                                                    = coop.rchain.models.Var.WildcardMsg(
    )
    implicit class WildcardMsgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Var.WildcardMsg])
        extends _root_.scalapb.lenses.ObjectLens[UpperPB, coop.rchain.models.Var.WildcardMsg](_l) {}
    def of(
    ): _root_.coop.rchain.models.Var.WildcardMsg = _root_.coop.rchain.models.Var.WildcardMsg(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[Var.WildcardMsg])
  }

  implicit class VarLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Var])
      extends _root_.scalapb.lenses.ObjectLens[UpperPB, coop.rchain.models.Var](_l) {
    def boundVar: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int]                      =
      field(_.getBoundVar)((c_, f_) => c_.copy(varInstance = coop.rchain.models.Var.VarInstance.BoundVar(f_)))
    def freeVar: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int]                       =
      field(_.getFreeVar)((c_, f_) => c_.copy(varInstance = coop.rchain.models.Var.VarInstance.FreeVar(f_)))
    def wildcard: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Var.WildcardMsg]    =
      field(_.getWildcard)((c_, f_) => c_.copy(varInstance = coop.rchain.models.Var.VarInstance.Wildcard(f_)))
    def varInstance: _root_.scalapb.lenses.Lens[UpperPB, coop.rchain.models.Var.VarInstance] =
      field(_.varInstance)((c_, f_) => c_.copy(varInstance = f_))
  }
  final val BOUND_VAR_FIELD_NUMBER = 1
  final val FREE_VAR_FIELD_NUMBER = 2
  final val WILDCARD_FIELD_NUMBER = 3
  def of(
    varInstance: coop.rchain.models.Var.VarInstance,
  ): _root_.coop.rchain.models.Var = _root_.coop.rchain.models.Var(
    varInstance,
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[Var])
}
